#setIdGame()
#=======================================================================================================================================================

#insertCurrentChoice(idGame,actual_id_step,id_answer)
#=======================================================================================================================================================

#formatText(text,lenLine,split)
'''
text='está en el inicio del Bosque Maldito, donde se encuentra 3 caminos está en el inicio del Bosque Maldito, donde se encuentra 3 caminos está en el inicio del Bosque Maldito, donde se encuentra 3 caminos'
lenLine=30
def formattext(text,lenLine):
    separado = text.split(' ')
    suma=0
    nonone=print('')
    for i in separado:
        suma+= len(i)+1
        if suma >= lenLine:
            print('')
            print(i,end=' ')
            aux=len(i)+1
            suma=aux
        else:
            print(i, end=' ')
    return print(nonone)

print(formattext(text,lenLine))
'''
#=======================================================================================================================================================

#getHeader(text)
'''
text='CONSTANTINE'
def getHeader(text):
    print('*'*100)
    print('='*43,text,'='*44)
    print('*'*100)
    return ''
print(getHeader(text))
'''
#=======================================================================================================================================================

#getFormatedBodyColumns(tupla_texts,tupla_sizes,margin=0):
#=======================================================================================================================================================

#getFormatedAdventures(adventures)
'''
adventures={1: ['historia_1','desc_his1'],
           2: ['historia_2','desc_his2'],
           3: ['historia_3','desc_his3'],
           4: ['historia_4','desc_his4'],
           5: ['historia_5','desc_his5']
           }

def getFormatedAdventures(adventures):
    print('='*40,'Adventures','='*40,'\n')
    print('{:<15} {:<25} {:<15} '.format('Id Adventure','Adventure','Description'))
    print('*'*100)
    for q, w in adventures.items():
        espacio1,espacio2 = w
        print('{:<15} {:<25} {:<15}'.format(q,espacio1,espacio2))
    return ''
print(getFormatedAdventures(adventures))
'''
#=======================================================================================================================================================

#getFormatedAnswers(idAnswer,text,lenLine,leftMargin)
'''
personaje='json'
text = {
    'bosque':f'{personaje} está en el inicio del Bosque Maldito, donde se encuentra 3 caminos ... ¿por donde irá?',
    'bosque_':
                ' a)Escoge el camino de la izquierda, a lo lejos se ve un puente colgante. \n '
                'b)Escoge el camino del centro, del que parecen provenir suidos de ramas al romperse y astillarse. \n '
                'c)Escoge el camino de la derecha, lleno de flores, ardillas. \n ',

    #bloque_bosque_paso1_resolucion_a
    'bosque_opc_a':'Decidido, piensas que es el camino más rapido Para atravesar el bosque.',
    'bosque_opc_a_res':'Efectivamente, el puente es el cámino mas corto, no contabas con que el puente se descolgaría, Y no sobrevives a la caida. FIN',
    #*********************FIN**********************

    #bloque_bosque_paso1_resolucion_b
    'bosque_opc_b':'Piensas que para ser digno de la espada de las valkirias, Debes de afrontar tus miedos y peligros que acechan',
    'bosque_opc_b_res':'Sorteando los peligros, llegas de noche al centro del bosque, y ves clavada en un cadaver una espada llameante que te susurra al oido... ¿Que haces?',
    'bosque_opc_b_res_opc_':f'  a)Arrancas la espada de cuajo, ¡ERES {personaje}!  '
                        'b)Atento a lo que dice la espada, escuchas levemente Las palabras ...matalos a todos ... por lo que decides No cogerla.  ',
    #bloque_bosque_paso1_resolucion_b_a
    'bosque_opc_b_res_opc_a_':'Matas a toda tu gente, e invadido por la tristeza, decides arrancarte la vida. FIN',
    'bosque_opc_b_res_opc_a_res':'Matas a toda tu gente, e invadido por la tristeza, decides arrancarte la vida. FIN',
    #bloque_bosque_paso1_resolucion_b_a
    'bosque_opc_b_res_opc_b':'La espada, al ver que eres un hombre fuerte y sensato, que eres capaz lo que dice, se entrega a ti como tu fiel Aliada.',
    'bosque_opc_b_res_opc_b_res':'Mas fuerte que nunca, decides que es el momento de erradicar el mal junto A tu nueva aliada, y te embarcas en una nueva aventura. FIN.',
    #*********************FIN**********************

    #bloque_bosque_paso1_resolucion_c
    'bosque_opc_c':'¿Que malo puede pasar?, parece salido de Disney.Con lo que no contabas es que en realidad has entrado al laberintoSombrio, y al rato vuelves a la misma encruzijada'
    #*********************FIN**********************
    }

idAnswer='bosque_'
leftMargin=10
lenLine=30
def getFormatedAnswers(idAnswer,text,lenLine,leftMargin):
    espacio=leftMargin*' '
    non=((text[idAnswer].split(' ')))
    suma=0
    for i in non:
        if i == '\n':
            print(i)

            suma = 1
        suma+=len(i)+1
        if suma >lenLine:
            print('')
            print(espacio,'  ',i, end=' ')
            aux=len(i)+2
            suma=aux
        if ('a)' in i or 'b)' in i or 'c)' in i)==True:
            print(espacio,i,end='')
        else:
            print(i,end=' ')
    return ''

print(getFormatedAnswers(idAnswer,text,lenLine,leftMargin))
'''
#=======================================================================================================================================================

#getHeadeForTableFromTuples(t_name_columns,t_size_columns,title="")
#=======================================================================================================================================================

#getTableFromDict(tuple_of_keys,weigth_of_columns,dict_of_data)
#=======================================================================================================================================================

#getOpt(textOpts="",inputOptText="",rangeList=[],dictionary={},exceptions=[])
#=======================================================================================================================================================

#getFormatedTable(queryTable,title="")
#=======================================================================================================================================================

#checkPassword(password)
'''
def password_check(passwd):
    SpecialSym = ['$', '@', '#', '%']
    val = True
    while val:
        val=False
        if len(passwd) < 8 :
            print('La contraseña debe de temer entre 8 y 12 caracteres\n')
            val=True
            passwd=input('Escribe una contraseña valida:\n')

        if len(passwd) > 12:
            print('La contraseña debe de temer entre 8 y 12 caracteres\n')
            val = True
            passwd=input('Escribe una contraseña valida:\n')

        if not any(char.isdigit() for char in passwd):
            print('La contraseña debe de contener algun numero\n')
            val = True
            passwd=input('Escribe una contraseña valida:\n')

        if not any(char.isupper() for char in passwd):
            print('La contraseña debe de contener alguna letra mayuscula\n')
            val = True
            passwd=input('Escribe una contraseña valida:\n')

        if not any(char.islower() for char in passwd):
            print('La contraseña debe de contener alguna letra miniscula\n')
            val = True
            passwd=input('Escribe una contraseña valida:\n')

        if not any(char in SpecialSym for char in passwd):
            print('La contraseña debe de contener algun caracter especial\n')
            val = True
            passwd=input('Escribe una contraseña valida:\n')

        if passwd.isspace()==True:
            print('La contraseña no puede contener espacios en blanco\n')
            val = True
            passwd = input('Escribe una contraseña valida:\n')

    val=True
    return val

contr='1@/2a'
print(password_check(contr))
'''
#=======================================================================================================================================================

#checkUser(user)
'''
def checkUser(user):
    val = True
    while val:
        val=False
        if len(user) < 6 :
            print('La contraseña debe de temer entre 6 y 10 caracteres\n')
            val=True
            user=input('Escribe una contraseña valida:\n')

        if len(user) > 10:
            print('La contraseña debe de temer entre 6 y 10 caracteres\n')
            val = True
            user=input('Escribe una contraseña valida:\n')

        if user.isalnum()==False:
            print('La contraseña no puede contener espacios en blanco\n')
            val = True
            user = input('Escribe una contraseña valida:\n')

    val=True
    return val

user='1@/2a'
print(checkUser(user))
'''
#=======================================================================================================================================================

#userExists(user)
#=======================================================================================================================================================

#replay(choices)
#=======================================================================================================================================================



